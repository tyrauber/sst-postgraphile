"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Account`."""
  allAccounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): AccountsConnection

  """Reads and enables pagination through a set of `Post`."""
  allPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection

  """Reads and enables pagination through a set of `Session`."""
  allSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SessionCondition
  ): SessionsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """Reads and enables pagination through a set of `VerificationToken`."""
  allVerificationTokens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `VerificationToken`."""
    orderBy: [VerificationTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VerificationTokenCondition
  ): VerificationTokensConnection
  accountById(id: String!): Account
  postById(id: String!): Post
  sessionById(id: String!): Session
  userById(id: String!): User
  verificationTokenById(id: Int!): VerificationToken

  """Reads a single `Account` using its globally unique `ID`."""
  account(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    nodeId: ID!
  ): Account

  """Reads a single `Post` using its globally unique `ID`."""
  post(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): Post

  """Reads a single `Session` using its globally unique `ID`."""
  session(
    """The globally unique `ID` to be used in selecting a single `Session`."""
    nodeId: ID!
  ): Session

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `VerificationToken` using its globally unique `ID`."""
  verificationToken(
    """
    The globally unique `ID` to be used in selecting a single `VerificationToken`.
    """
    nodeId: ID!
  ): VerificationToken
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  userId: String!
  type: String!
  provider: String!
  providerAccountId: String!
  refreshToken: String
  accessToken: String
  expiresAt: Int
  tokenType: String
  scope: String
  idToken: String
  sessionState: String
  oauthTokenSecret: String
  oauthToken: String

  """Reads a single `User` that is related to this `Account`."""
  userByUserId: User
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  name: String
  email: String
  emailVerified: Datetime
  image: String

  """Reads and enables pagination through a set of `Post`."""
  postsByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection!

  """Reads and enables pagination through a set of `Account`."""
  accountsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition
  ): AccountsConnection!

  """Reads and enables pagination through a set of `Session`."""
  sessionsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SessionCondition
  ): SessionsConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  title: String!
  content: String
  published: Boolean!
  authorId: String

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  CONTENT_ASC
  CONTENT_DESC
  PUBLISHED_ASC
  PUBLISHED_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `published` field."""
  published: Boolean

  """Checks for equality with the object’s `authorId` field."""
  authorId: String
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  TYPE_ASC
  TYPE_DESC
  PROVIDER_ASC
  PROVIDER_DESC
  PROVIDER_ACCOUNT_ID_ASC
  PROVIDER_ACCOUNT_ID_DESC
  REFRESH_TOKEN_ASC
  REFRESH_TOKEN_DESC
  ACCESS_TOKEN_ASC
  ACCESS_TOKEN_DESC
  EXPIRES_AT_ASC
  EXPIRES_AT_DESC
  TOKEN_TYPE_ASC
  TOKEN_TYPE_DESC
  SCOPE_ASC
  SCOPE_DESC
  ID_TOKEN_ASC
  ID_TOKEN_DESC
  SESSION_STATE_ASC
  SESSION_STATE_DESC
  OAUTH_TOKEN_SECRET_ASC
  OAUTH_TOKEN_SECRET_DESC
  OAUTH_TOKEN_ASC
  OAUTH_TOKEN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `provider` field."""
  provider: String

  """Checks for equality with the object’s `providerAccountId` field."""
  providerAccountId: String

  """Checks for equality with the object’s `refreshToken` field."""
  refreshToken: String

  """Checks for equality with the object’s `accessToken` field."""
  accessToken: String

  """Checks for equality with the object’s `expiresAt` field."""
  expiresAt: Int

  """Checks for equality with the object’s `tokenType` field."""
  tokenType: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `idToken` field."""
  idToken: String

  """Checks for equality with the object’s `sessionState` field."""
  sessionState: String

  """Checks for equality with the object’s `oauthTokenSecret` field."""
  oauthTokenSecret: String

  """Checks for equality with the object’s `oauthToken` field."""
  oauthToken: String
}

"""A connection to a list of `Session` values."""
type SessionsConnection {
  """A list of `Session` objects."""
  nodes: [Session]!

  """
  A list of edges which contains the `Session` and cursor to aid in pagination.
  """
  edges: [SessionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Session` you could get from the connection."""
  totalCount: Int!
}

type Session implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: String!
  sessionToken: String!
  userId: String!
  expires: Datetime!

  """Reads a single `User` that is related to this `Session`."""
  userByUserId: User
}

"""A `Session` edge in the connection."""
type SessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Session` at the end of the edge."""
  node: Session
}

"""Methods to use when ordering `Session`."""
enum SessionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SESSION_TOKEN_ASC
  SESSION_TOKEN_DESC
  USER_ID_ASC
  USER_ID_DESC
  EXPIRES_ASC
  EXPIRES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Session` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SessionCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `sessionToken` field."""
  sessionToken: String

  """Checks for equality with the object’s `userId` field."""
  userId: String

  """Checks for equality with the object’s `expires` field."""
  expires: Datetime
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  EMAIL_VERIFIED_ASC
  EMAIL_VERIFIED_DESC
  IMAGE_ASC
  IMAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `emailVerified` field."""
  emailVerified: Datetime

  """Checks for equality with the object’s `image` field."""
  image: String
}

"""A connection to a list of `VerificationToken` values."""
type VerificationTokensConnection {
  """A list of `VerificationToken` objects."""
  nodes: [VerificationToken]!

  """
  A list of edges which contains the `VerificationToken` and cursor to aid in pagination.
  """
  edges: [VerificationTokensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `VerificationToken` you could get from the connection.
  """
  totalCount: Int!
}

type VerificationToken implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  identifier: String!
  token: String!
  expires: Datetime!
}

"""A `VerificationToken` edge in the connection."""
type VerificationTokensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `VerificationToken` at the end of the edge."""
  node: VerificationToken
}

"""Methods to use when ordering `VerificationToken`."""
enum VerificationTokensOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  TOKEN_ASC
  TOKEN_DESC
  EXPIRES_ASC
  EXPIRES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `VerificationToken` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input VerificationTokenCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `token` field."""
  token: String

  """Checks for equality with the object’s `expires` field."""
  expires: Datetime
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Account`."""
  createAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAccountInput!
  ): CreateAccountPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `Session`."""
  createSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSessionInput!
  ): CreateSessionPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `VerificationToken`."""
  createVerificationToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVerificationTokenInput!
  ): CreateVerificationTokenPayload

  """Updates a single `Account` using its globally unique id and a patch."""
  updateAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload

  """Updates a single `Account` using a unique key and a patch."""
  updateAccountById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAccountByIdInput!
  ): UpdateAccountPayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByIdInput!
  ): UpdatePostPayload

  """Updates a single `Session` using its globally unique id and a patch."""
  updateSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSessionInput!
  ): UpdateSessionPayload

  """Updates a single `Session` using a unique key and a patch."""
  updateSessionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSessionByIdInput!
  ): UpdateSessionPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """
  Updates a single `VerificationToken` using its globally unique id and a patch.
  """
  updateVerificationToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVerificationTokenInput!
  ): UpdateVerificationTokenPayload

  """Updates a single `VerificationToken` using a unique key and a patch."""
  updateVerificationTokenById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateVerificationTokenByIdInput!
  ): UpdateVerificationTokenPayload

  """Deletes a single `Account` using its globally unique id."""
  deleteAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountInput!
  ): DeleteAccountPayload

  """Deletes a single `Account` using a unique key."""
  deleteAccountById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAccountByIdInput!
  ): DeleteAccountPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByIdInput!
  ): DeletePostPayload

  """Deletes a single `Session` using its globally unique id."""
  deleteSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSessionInput!
  ): DeleteSessionPayload

  """Deletes a single `Session` using a unique key."""
  deleteSessionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSessionByIdInput!
  ): DeleteSessionPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `VerificationToken` using its globally unique id."""
  deleteVerificationToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVerificationTokenInput!
  ): DeleteVerificationTokenPayload

  """Deletes a single `VerificationToken` using a unique key."""
  deleteVerificationTokenById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteVerificationTokenByIdInput!
  ): DeleteVerificationTokenPayload
}

"""The output of our create `Account` mutation."""
type CreateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was created by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Account`."""
  userByUserId: User

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the create `Account` mutation."""
input CreateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Account` to be created by this mutation."""
  account: AccountInput!
}

"""An input for mutations affecting `Account`"""
input AccountInput {
  id: String!
  userId: String!
  type: String!
  provider: String!
  providerAccountId: String!
  refreshToken: String
  accessToken: String
  expiresAt: Int
  tokenType: String
  scope: String
  idToken: String
  sessionState: String
  oauthTokenSecret: String
  oauthToken: String
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""An input for mutations affecting `Post`"""
input PostInput {
  id: String!
  title: String!
  content: String
  published: Boolean
  authorId: String
}

"""The output of our create `Session` mutation."""
type CreateSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Session` that was created by this mutation."""
  session: Session

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Session`."""
  userByUserId: User

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsEdge
}

"""All input for the create `Session` mutation."""
input CreateSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Session` to be created by this mutation."""
  session: SessionInput!
}

"""An input for mutations affecting `Session`"""
input SessionInput {
  id: String!
  sessionToken: String!
  userId: String!
  expires: Datetime!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: String!
  name: String
  email: String
  emailVerified: Datetime
  image: String
}

"""The output of our create `VerificationToken` mutation."""
type CreateVerificationTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `VerificationToken` that was created by this mutation."""
  verificationToken: VerificationToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `VerificationToken`. May be used by Relay 1."""
  verificationTokenEdge(
    """The method to use when ordering `VerificationToken`."""
    orderBy: [VerificationTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): VerificationTokensEdge
}

"""All input for the create `VerificationToken` mutation."""
input CreateVerificationTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `VerificationToken` to be created by this mutation."""
  verificationToken: VerificationTokenInput!
}

"""An input for mutations affecting `VerificationToken`"""
input VerificationTokenInput {
  id: Int
  identifier: String!
  token: String!
  expires: Datetime!
}

"""The output of our update `Account` mutation."""
type UpdateAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was updated by this mutation."""
  account: Account

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Account`."""
  userByUserId: User

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `updateAccount` mutation."""
input UpdateAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
}

"""
Represents an update to a `Account`. Fields that are set will be updated.
"""
input AccountPatch {
  id: String
  userId: String
  type: String
  provider: String
  providerAccountId: String
  refreshToken: String
  accessToken: String
  expiresAt: Int
  tokenType: String
  scope: String
  idToken: String
  sessionState: String
  oauthTokenSecret: String
  oauthToken: String
}

"""All input for the `updateAccountById` mutation."""
input UpdateAccountByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Account` being updated.
  """
  accountPatch: AccountPatch!
  id: String!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  id: String
  title: String
  content: String
  published: Boolean
  authorId: String
}

"""All input for the `updatePostById` mutation."""
input UpdatePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
  id: String!
}

"""The output of our update `Session` mutation."""
type UpdateSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Session` that was updated by this mutation."""
  session: Session

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Session`."""
  userByUserId: User

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsEdge
}

"""All input for the `updateSession` mutation."""
input UpdateSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Session` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Session` being updated.
  """
  sessionPatch: SessionPatch!
}

"""
Represents an update to a `Session`. Fields that are set will be updated.
"""
input SessionPatch {
  id: String
  sessionToken: String
  userId: String
  expires: Datetime
}

"""All input for the `updateSessionById` mutation."""
input UpdateSessionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Session` being updated.
  """
  sessionPatch: SessionPatch!
  id: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: String
  name: String
  email: String
  emailVerified: Datetime
  image: String
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: String!
}

"""The output of our update `VerificationToken` mutation."""
type UpdateVerificationTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `VerificationToken` that was updated by this mutation."""
  verificationToken: VerificationToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `VerificationToken`. May be used by Relay 1."""
  verificationTokenEdge(
    """The method to use when ordering `VerificationToken`."""
    orderBy: [VerificationTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): VerificationTokensEdge
}

"""All input for the `updateVerificationToken` mutation."""
input UpdateVerificationTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VerificationToken` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `VerificationToken` being updated.
  """
  verificationTokenPatch: VerificationTokenPatch!
}

"""
Represents an update to a `VerificationToken`. Fields that are set will be updated.
"""
input VerificationTokenPatch {
  id: Int
  identifier: String
  token: String
  expires: Datetime
}

"""All input for the `updateVerificationTokenById` mutation."""
input UpdateVerificationTokenByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `VerificationToken` being updated.
  """
  verificationTokenPatch: VerificationTokenPatch!
  id: Int!
}

"""The output of our delete `Account` mutation."""
type DeleteAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Account` that was deleted by this mutation."""
  account: Account
  deletedAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Account`."""
  userByUserId: User

  """An edge for our `Account`. May be used by Relay 1."""
  accountEdge(
    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AccountsEdge
}

"""All input for the `deleteAccount` mutation."""
input DeleteAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Account` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAccountById` mutation."""
input DeleteAccountByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePostById` mutation."""
input DeletePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `Session` mutation."""
type DeleteSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Session` that was deleted by this mutation."""
  session: Session
  deletedSessionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Session`."""
  userByUserId: User

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SessionsEdge
}

"""All input for the `deleteSession` mutation."""
input DeleteSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Session` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSessionById` mutation."""
input DeleteSessionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""The output of our delete `VerificationToken` mutation."""
type DeleteVerificationTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `VerificationToken` that was deleted by this mutation."""
  verificationToken: VerificationToken
  deletedVerificationTokenId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `VerificationToken`. May be used by Relay 1."""
  verificationTokenEdge(
    """The method to use when ordering `VerificationToken`."""
    orderBy: [VerificationTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): VerificationTokensEdge
}

"""All input for the `deleteVerificationToken` mutation."""
input DeleteVerificationTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `VerificationToken` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteVerificationTokenById` mutation."""
input DeleteVerificationTokenByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}
